<?php

module_load_include('inc', 'ros_purchase', 'RosPurchaseBuild');
module_load_include('inc', 'ros_purchase', 'RosPurchaseProcess');

// help hook
function ros_purchase_help($path, $arg) {
	
	switch ($path) {
		case 'admin/help#ros_purchase':
		return t('This module implements purchasing for CET River Of Stories');
	}
}


function ros_purchase_permission() {
	return array(
    'ros_purchase' => array(
      'title' => t('River Of Stories Purchase'),
		),
	);
}


// menu hook
function ros_purchase_menu() {
		$items['ros_purchase'] = array(
		 'title' => t('Purchase'),
		 'page callback' => 'ros_purchase_page',
		'access arguments' => array('ros_purchase'),
		 'type' => MENU_NORMAL_ITEM
		);
		
		return $items;
}
	
// page hook - returns the form
function ros_purchase_page() {
	return drupal_get_form('ros_purchase_page_form');
}

function ros_purchase_load_javascript($el) {
	
	drupal_add_js(drupal_get_path('module', 'ros_purchase') . '/stopAutocompletePassword.js');
	
	return $el;
}

// form hook
function ros_purchase_page_form() {

	return RosPurchaseBuild::pageForm();
	
}

function ros_purchase_updated_count($form, $form_state) {

	$ros_purchase_process = new RosPurchaseProcess($form_state);
	
	$commands = array();
	$commands[] = ajax_command_replace('#gst-amount', '<div id="gst-amount">$' . money_format('%i', $ros_purchase_process->gst) . '</div>');
	$commands[] = ajax_command_replace('#total-amount', '<div id="total-amount">$' . money_format('%i', $ros_purchase_process->total_amount) . '</div>');
	$commands[] = ajax_command_css('#edit-login', array('display' => $ros_purchase_process->grants_access ? 'inline' : 'none') );
	
	return array('#type' => 'ajax', '#commands' => $commands);
}

// form submit hook
//
function ros_purchase_page_form_submit($form_id, &$form_state) {

	// debug('Submit purchase: ' . print_r($form_state, true));
	
	$ros_purchase_process = new RosPurchaseProcess($form_state);
	
	$ros_purchase_process->SendFulfillmentMail();
}

function ros_purchase_mailkeys() {
	return array('ros_purchase_adminbuy' => 'Message to administrator when user buys');
}

function ros_purchase_mail($key, &$message, $params) {
	
	if (isset($params['subject'])) {
		$message['subject'] = $params['subject'];
	}
	if (isset($params['body'])) {
		$message['body'][] = $params['body'];
	}
	if (isset($params['headers']) && is_array($params['headers'])) {
		$message['headers'] += $params['headers'];
	}
	
}

function ros_purchase_mail_edit_text($mailkey, $language) {
	$return = array();
	$return['subject'] = '';
	$return['body'] = '';
	return $return;
}


function ros_purchase_mail_edit_token_types($mailkey)
{
	return array('ros_purchase');
}

function ros_purchase_tokens($type, $tokens, array $data = array(), array $options = array()) {
	if($type != 'ros_purchase') {
		return array();
	}
	
	if (array_key_exists('order', $tokens)) {
		return array($tokens['order'] => $data['order_object']->MakeOrderDetails());
	}
	
	return array();
}

function ros_purchase_token_info() {
	return array(
		'types' => array('ros_purchase' => array('name' => 'ros_purchase', 'description' => t('River Of Stories Purchase'), 'needs-data' => 'ros_purchase')),
		'tokens' => array('ros_purchase' => array('order' => array('name' => t('Order'), 'description' => t('Order details')))),
	);
}

